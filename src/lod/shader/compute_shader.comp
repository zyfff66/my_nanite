#version 450
#extension GL_ARB_separate_shader_objects:enable
#extension GL_EXT_nonuniform_qualifier:enable

layout(set=0,binding=0) buffer BindlessBuffer
{
    uint data[];
}buffers[];

layout(push_constant) uniform constant
{
    uint swapchain_idx;
}push_constants;

layout (local_size_x=32) in;

uint num_swapchain_image()
{
    return buffers[0].data[0];
}

struct Cluster{
    vec4 lod_bounds;
    vec4 parent_lod_bounds;
    float lod_error;
    float max_parent_lod_error;
};

Cluster get_cluster(uint cluster_id)
{
    Cluster cluster;
    uint idx=1+3*num_swapchain_image();
    uint offset= 4+16*cluster_id;

    cluster.lod_bounds.x=uintBitsToFloat(buffers[idx].data[4+offset]);
    cluster.lod_bounds.y=uintBitsToFloat(buffers[idx].data[4+offset+1]);
    cluster.lod_bounds.z=uintBitsToFloat(buffers[idx].data[4+offset+2]);
    cluster.lod_bounds.w=uintBitsToFloat(buffers[idx].data[4+offset+3]);

    cluster.parent_lod_bounds.x=uintBitsToFloat(buffers[idx].data[8+offset]);
    cluster.parent_lod_bounds.y=uintBitsToFloat(buffers[idx].data[8+offset+1]);
    cluster.parent_lod_bounds.z=uintBitsToFloat(buffers[idx].data[8+offset+2]);
    cluster.parent_lod_bounds.w=uintBitsToFloat(buffers[idx].data[8+offset+3]);

    cluster.lod_error=uintBitsToFloat(buffers[idx].data[12+offset]);
    cluster.max_parent_lod_error=uintBitsToFloat(buffers[idx].data[13+offset]);
    return cluster;
}

struct FrameContext{
    mat4 vp_mat;
    mat4 v_mat;
};

FrameContext get_frame_context()
{
	uint idx=push_constants.swapchain_idx+1+2*num_swapchain_image();
	FrameContext context;
	for(int i=0;i<4;i++)
    {
		vec4 p;
		p.x=uintBitsToFloat(buffers[idx].data[i*4]);
		p.y=uintBitsToFloat(buffers[idx].data[i*4+1]);
		p.z=uintBitsToFloat(buffers[idx].data[i*4+2]);
		p.w=uintBitsToFloat(buffers[idx].data[i*4+3]);
		context.vp_mat[i]=p;
	}
    for(int i=0;i<4;i++)
    {
		vec4 p;
		p.x=uintBitsToFloat(buffers[idx].data[i*4+16]);
		p.y=uintBitsToFloat(buffers[idx].data[i*4+1+16]);
		p.z=uintBitsToFloat(buffers[idx].data[i*4+2+16]);
		p.w=uintBitsToFloat(buffers[idx].data[i*4+3+16]);
		context.v_mat[i]=p;
	}
	return context;
}

uint get_num_clusters()
{
    uint idx=1+3*num_swapchain_image();
    return buffers[idx].data[0];
}

bool check_lod(mat4 v_mat,vec4 bounds,float error)
{
    vec3 p=(v_mat*vec4(bounds.xyz,1)).xyz;
    float d=max(length(p)-bounds.w,0);
    float theta=radians(40)/1080.f;
    return theta*d>=error;
}

void add_visible_cluster(uint cluster_id)
{
    uint idx=push_constants.swapchain_idx+1+num_swapchain_image();
    uint idx1=push_constants.swapchain_idx+1;
    uint pos=atomicAdd(buffers[idx1].data[1],1);
    buffers[idx].data[pos]=cluster_id;
}

void init_arg()
{
    uint idx1=push_constants.swapchain_idx+1;
    buffers[idx1].data[0]=128*3;
    buffers[idx1].data[1]=0;
    buffers[idx1].data[2]=0;
    buffers[idx1].data[3]=0;

}

void main()
{
    uint cluster_id=gl_GlobalInvocationID.x;
    uint cluster_num=get_num_clusters();

    if(gl_GlobalInvocationID.x==0)
    {
        init_arg();
    }
    barrier();
    if(cluster_id<cluster_num)
    {
        Cluster cluster=get_cluster(cluster_id);
        FrameContext context=get_frame_context();

        bool parent_chk=check_lod(context.v_mat,cluster.parent_lod_bounds,cluster.max_parent_lod_error);
        bool cluster_chk=check_lod(context.v_mat,cluster.lod_bounds,cluster.lod_error);
        if(!parent_chk&&cluster_chk)
        {
            add_visible_cluster(cluster_id);
        }

    }
}