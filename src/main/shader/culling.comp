#version 450
#extension GL_ARB_separate_shader_objects:enable
#extension GL_EXT_nonuniform_qualifier:enable

layout(set=0,binding=0) buffer BindlessBuffer{
    uint data[];
}buffers[];

layout(set=1,binding=0) uniform sampler2D level_deps[];

layout(push_constant) uniform constant{
	uint swapchain_idx;
}pc;

layout (local_size_x=32) in;

uint num_swapchain_image(){
    return buffers[0].data[0];
}

uint get_num_clusters(){
    uint idx=1+3*num_swapchain_image();
    return buffers[idx].data[0];
}

uint get_num_group(){
    uint idx=1+3*num_swapchain_image();
    return buffers[idx].data[1];
}

uint get_group_data_offset(){
    uint idx=1+3*num_swapchain_image();
    return buffers[idx].data[2];
}


struct Cluster{
    vec4 bounds;
    vec4 lod_bounds;
    vec4 parent_lod_bounds;
    float lod_error;
    float max_parent_lod_error;
};

struct Group{
    vec4 lod_bounds;
    uint num_clusters;
    uint cluster_data_ofs;
    float max_parent_lod_error;
};

struct FrameContext{
    mat4 vp_mat;
    mat4 v_mat;
    mat4 p_mat;
};

Cluster get_cluster(uint cluster_id){
    Cluster cluster;
    uint idx=1+3*num_swapchain_image();
    uint ofs=4+20*cluster_id;

    cluster.bounds.x=uintBitsToFloat(buffers[idx].data[4+ofs]);
	cluster.bounds.y=uintBitsToFloat(buffers[idx].data[5+ofs]);
	cluster.bounds.z=uintBitsToFloat(buffers[idx].data[6+ofs]);
	cluster.bounds.w=uintBitsToFloat(buffers[idx].data[7+ofs]);

    cluster.lod_bounds.x=uintBitsToFloat(buffers[idx].data[8+ofs]);
	cluster.lod_bounds.y=uintBitsToFloat(buffers[idx].data[9+ofs]);
	cluster.lod_bounds.z=uintBitsToFloat(buffers[idx].data[10+ofs]);
	cluster.lod_bounds.w=uintBitsToFloat(buffers[idx].data[11+ofs]);

    cluster.parent_lod_bounds.x=uintBitsToFloat(buffers[idx].data[12+ofs]);
	cluster.parent_lod_bounds.y=uintBitsToFloat(buffers[idx].data[13+ofs]);
	cluster.parent_lod_bounds.z=uintBitsToFloat(buffers[idx].data[14+ofs]);
	cluster.parent_lod_bounds.w=uintBitsToFloat(buffers[idx].data[15+ofs]);

    cluster.lod_error=uintBitsToFloat(buffers[idx].data[16+ofs]);
    cluster.max_parent_lod_error=uintBitsToFloat(buffers[idx].data[17+ofs]);
    return cluster;
}

Group get_group(uint group_id){
    Group group;
    uint idx=1+3*num_swapchain_image();
    uint ofs=get_group_data_offset()+8*group_id;

    group.num_clusters=buffers[idx].data[ofs];
    group.cluster_data_ofs=buffers[idx].data[1+ofs];
    group.max_parent_lod_error=uintBitsToFloat(buffers[idx].data[2+ofs]);

    group.lod_bounds.x=uintBitsToFloat(buffers[idx].data[4+ofs]);
    group.lod_bounds.y=uintBitsToFloat(buffers[idx].data[5+ofs]);
    group.lod_bounds.z=uintBitsToFloat(buffers[idx].data[6+ofs]);
    group.lod_bounds.w=uintBitsToFloat(buffers[idx].data[7+ofs]);
    return group;
}

uint get_cluster_id(Group group,uint c_idx){
    uint idx=1+3*num_swapchain_image();
    uint ofs=group.cluster_data_ofs;
    return buffers[idx].data[c_idx+ofs];
}

FrameContext get_frame_context(){
	uint idx=pc.swapchain_idx+1+2*num_swapchain_image();
	FrameContext context;
	for(int i=0;i<4;i++){
		vec4 p;
		p.x=uintBitsToFloat(buffers[idx].data[i*4]);
		p.y=uintBitsToFloat(buffers[idx].data[i*4+1]);
		p.z=uintBitsToFloat(buffers[idx].data[i*4+2]);
		p.w=uintBitsToFloat(buffers[idx].data[i*4+3]);
		context.vp_mat[i]=p;
	}
    for(int i=0;i<4;i++){
		vec4 p;
		p.x=uintBitsToFloat(buffers[idx].data[i*4+16]);
		p.y=uintBitsToFloat(buffers[idx].data[i*4+1+16]);
		p.z=uintBitsToFloat(buffers[idx].data[i*4+2+16]);
		p.w=uintBitsToFloat(buffers[idx].data[i*4+3+16]);
		context.v_mat[i]=p;
	}
    for(int i=0;i<4;i++){
		vec4 p;
		p.x=uintBitsToFloat(buffers[idx].data[i*4+32]);
		p.y=uintBitsToFloat(buffers[idx].data[i*4+1+32]);
		p.z=uintBitsToFloat(buffers[idx].data[i*4+2+32]);
		p.w=uintBitsToFloat(buffers[idx].data[i*4+3+32]);
		context.p_mat[i]=p;
	}
	return context;
}

void add_cluster(uint cluster_id,uint instance_id)
{
    uint idx=pc.swapchain_idx+1+num_swapchain_image();// visiable_clusters_buffer
    uint idx1=pc.swapchain_idx+1;
    uint pos=atomicAdd(buffers[idx1].data[1],1);
    buffers[idx].data[pos*2]=cluster_id;
    buffers[idx].data[pos*2+1]=instance_id;
}

vec3 get_instance_offset(uint instance_id)
{
    uint idx=2+3*num_swapchain_image();
    vec3 p;
    p.x=uintBitsToFloat(buffers[idx].data[instance_id*3]);
    p.y=uintBitsToFloat(buffers[idx].data[instance_id*3+1]);
    p.z=uintBitsToFloat(buffers[idx].data[instance_id*3+2]);
    return p;
}

bool check_lod(mat4 v_mat,vec3 c,float r,float error)
{
    vec3 p = (v_mat*vec4(c,1)).xyz;
    float d=max(length(p)-r,0);
    float theta=radians(40)/1080.0f;
    return theta*d>=error;
}

bool frustum_cull(vec3 view_c,float r,mat4 p_mat){
    vec3 p1=normalize(vec3(p_mat[0][0],0,1));
    vec3 p2=normalize(vec3(-p_mat[0][0],0,1));
    vec3 p3=normalize(vec3(0,p_mat[1][1],1));
    vec3 p4=normalize(vec3(0,-p_mat[1][1],1));
    return dot(p1,view_c)<r&&dot(p2,view_c)<r&&dot(p3,view_c)<r&&dot(p4,view_c)<r;
}

vec2 project_sphere(float a,float z,float r)
{
    float t=sqrt(a*a+z*z-r*r);
    float M=(z*r-a*t)/(a*r+z*t);
    float m=(z*r+a*t)/(a*r-z*t);
    return vec2(m,M);
}

vec4 sphere_to_clip_rect(vec3 c,float r,mat4 p_mat)
{
    vec2 x_range=project_sphere(c.x,c.z,r)*p_mat[0][0];
    vec2 y_range=project_sphere(c.y,c.z,r)*p_mat[1][1];
    return vec4(x_range.x,y_range.y,x_range.y,y_range.x);
}

ivec4 to_screen_rect(vec4 rect)
{
    rect=clamp(rect*0.5+0.5,0,1);
    return ivec4(floor(rect.x*1920),floor(rect.y*1080),ceil(rect.z*1920),ceil(rect.w*1080));
}

uint high_bit(uint x)
{
    uint res=0,t=16,y=0;
    y=-((x>>t)!=0?1:0),res+=y&t,x>>=y&t,t>>=1;
    y=-((x>>t)!=0?1:0),res+=y&t,x>>=y&t,t>>=1;
    y=-((x>>t)!=0?1:0),res+=y&t,x>>=y&t,t>>=1;
    y=-((x>>t)!=0?1:0),res+=y&t,x>>=y&t,t>>=1;
    y=(x>>t)!=0?1:0,res+=y;
    return res;
}

ivec4 mip0_to_mip1(ivec4 rect)
{
    int tx=(rect.x+1)*1024;
    int x=tx/1920;
    if(tx%1920==0) x--;
    int ty=(rect.y+1)*1024;
    int y=ty/1080;
    if(ty%1080==0) y--;

    int z=(rect.z-1)*1024/1920;//1/HZB
    if(z<x) z=x;
    int w=(rect.w-1)*1024/1080;
    if(w<y) w=y;
    return ivec4(x,y,z,w);
}

bool hzb_cull(vec3 view_c,float r,mat4 p_mat)
{
    vec4 rect=sphere_to_clip_rect(view_c,r,p_mat);
    ivec4 screen_rect=to_screen_rect(rect);
    ivec4 hzb_rect=mip0_to_mip1(screen_rect);
    uint lod=high_bit(max(hzb_rect.z-hzb_rect.x,hzb_rect.w-hzb_rect.y));

    vec2 uv=(hzb_rect.xy+0.5)/vec2(1024,1024);
    float x=textureLod(level_deps[12],uv,lod).x;
    float y=textureLodOffset(level_deps[12],uv,lod,ivec2(1,0)).x;
    float z=textureLodOffset(level_deps[12],uv,lod,ivec2(1,1)).x;
    float w=textureLodOffset(level_deps[12],uv,lod,ivec2(0,1)).x;

    float min_z=min(min(x,y),min(z,w));
    float nz=view_c.z+r;
    nz=-0.1/nz;

    return nz>min_z;
}

void main()
{
    uint t_id=gl_GlobalInvocationID.x;
    uint group_id=t_id/900;
    uint instance_id=t_id%900;
    uint num_group=get_num_group();

    if(group_id<num_group)
    {
        Group group=get_group(group_id);
        vec3 ins_ofs=get_instance_offset(instance_id);
        FrameContext context=get_frame_context();

        bool parent_chk=check_lod(context.v_mat,group.lod_bounds.xyz+ins_ofs,group.lod_bounds.w,group.max_parent_lod_error);
        if(!parent_chk)// 父节点不通过，子节点才可能通过
        {
            for(uint i=0;i<group.num_clusters;i++)
            {
                uint cluster_id=get_cluster_id(group,i);
                Cluster cluster=get_cluster(cluster_id);

                bool visible=true;
                bool cluster_chk=check_lod(context.v_mat,cluster.lod_bounds.xyz+ins_ofs,cluster.lod_bounds.w,cluster.lod_error);

                if(!cluster_chk)
                    visible=false;
                if(visible)
                {
                    vec3 c=cluster.bounds.xyz+ins_ofs;
                    float r=cluster.bounds.w;
                    vec3 view_c=(context.v_mat*vec4(c,1)).xyz;

                    if(view_c.z-r>-0.1)// 近平面
                        visible=false;
                    else
                    {
                        visible=frustum_cull(view_c,r,context.p_mat);
                        if(visible&&view_c.z+r<-0.1)
                        {
                            visible=hzb_cull(view_c,r,context.p_mat);
                        }
                    }
                }
                if(visible)
                    add_cluster(cluster_id,instance_id);
            }
        }
    }
}